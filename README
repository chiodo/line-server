How does your system work? (if not addressed in comments in source)

The system consists of a super simple Sinatra app with 2 routes: a root context, and one for '/lines'. The lines context delegates to a simple class called FileFetcher that handles the logic for getting the line.  That class preloads the file entirely into memory into an array with one element per line of the file.  Access is then simply "get me the index in the array".  Error handling is then "did you ask for a line that's beyond the size or equal to the length of our array?".

In this version of the server, I went for "simple" over "can scale massively".

How will your system perform with a 1 GB file? a 10 GB file? a 100 GB file?
This version will do well up to whatever reasonable limit the system can allocate for memory.  So, if your file is 2GB, and you have 2GB of memory 'free', then this will work fine.  This approach is pretty suboptimal for files larger than will fit in memory.

How will your system perform with 100 users? 10000 users? 1000000 users?
Concurrency is pretty good up until about 100 users.  Puma (the webserver used for this) has no connection buffering, so at some point above 100, connections get dropped.  To scale this more broadly, I'd scale horizontally, first on a single server up until memory constraints were an issue, then across multiple machines.  Alternatively, we could use something like passenger which would handle the connection buffering for us.

What documentation, websites, papers, etc did you consult in doing this assignment?

Mostly just some ruby docs to make sure I was using standard apis correctly.  There were a few stack overflow questions around file descriptors and some other sysctl stuff to try and eek out a little more concurrency

What third-party libraries or other tools does the system use? How did you choose each library or framework you used?

This system uses sinatra, puma and ruby (with rubygems and bundler).  I chose Ruby because it's pretty simple, and the language I am most familiar with.  Sinatra is a decent web layer and middleware that's super easy to use and very lightweight (as opposed to using Rails, for example).  Puma seems to be the best concurrent web server for ruby.

How long did you spend on this exercise? If you had unlimited more time to spend on this, how would you spend it and how would you prioritize each item?

I spent 3 or 4 hours, most of it just bootstrapping and testing a few things like thin vs puma.

If I had unlimited more time I would:
1) Write a better file handler (more on this in some other branches!)
2) Scale it horizontally on a single server (maybe use a simple Docker image with nginx)
3) Scale it horizontally on multiple servers

If you were to critique your code, what would you have to say about it?

I think the code is very simple and easy to understand.  Its error handling is pretty declarative (although not overly comprehensive), and there's not much left to the imagination here.  I like the simplicity of this, but it certainly has some scaling concerns.  My biggest critique would be that it's only really part of an implementation.  It needs some good horizontal scaling