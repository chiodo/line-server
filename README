How does your system work? (if not addressed in comments in source)

The system consists of a super simple Sinatra app with 2 routes: a root context, and one for '/lines'. The lines context delegates to a simple class called FileFetcher that handles the logic for getting the line.  The filefetcher indexes the file by reading one line at a time, and marking the offset of that line in the file in an array.  Then when we fetch the line later, we seek to the position referenced in the file, read the line, and move along.

How will your system perform with a 1 GB file? a 10 GB file? a 100 GB file?
This version is fairly memory efficient.  I loaded a 10GB file, and it only took around 75MB of memory.  It would be pretty easy to scale this horizontally on a node.  This comes at the price of speed, however, because every request requires a seek and subsequent read of a line in the file.  Startup time is pretty slow, too, but for a 10GB file it took maybe 30 seconds, which is tolerable.

How will your system perform with 100 users? 10000 users? 1000000 users?
Concurrency is pretty good up until about 100 users.  Puma (the webserver used for this) has no connection buffering, so at some point above 100, connections get dropped.  To scale this more broadly, I'd scale horizontally, first on a single server up until memory constraints were an issue, then across multiple machines.  Alternatively, we could use something like passenger which would handle the connection buffering for us.

What documentation, websites, papers, etc did you consult in doing this assignment?

Mostly just some ruby docs to make sure I was using standard apis correctly.  There were a few stack overflow questions around file descriptors and some other sysctl stuff to try and eek out a little more concurrency

What third-party libraries or other tools does the system use? How did you choose each library or framework you used?

This system uses sinatra, puma and ruby (with rubygems and bundler).  I chose Ruby because it's pretty simple, and the language I am most familiar with.  Sinatra is a decent web layer and middleware that's super easy to use and very lightweight (as opposed to using Rails, for example).  Puma seems to be the best concurrent web server for ruby.

How long did you spend on this exercise? If you had unlimited more time to spend on this, how would you spend it and how would you prioritize each item?

I spent 3 or 4 hours, most of it just bootstrapping and testing a few things like thin vs puma.

If I had unlimited more time I would:
1) Write a better file handler (more on this in some other branches!)
2) Scale it horizontally on a single server (maybe use a simple Docker image with nginx)
3) Scale it horizontally on multiple servers

If you were to critique your code, what would you have to say about it?

I think the code is very simple and easy to understand.  Its error handling is pretty declarative (although not overly comprehensive), and there's not much left to the imagination here.  I like the simplicity of this, but it certainly has some scaling concerns.